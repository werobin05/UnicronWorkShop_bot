use sqlx::PgPool;
use teloxide::{prelude::*, utils::command::BotCommands};
use crate::commands::{settings::settings, help::help, orders::orders, services::services, start::start, Command};

pub async fn message_handler(bot: Bot, msg: Message, pool: PgPool) -> ResponseResult<()> {

    if let Some(text) = msg.text() {
        match Command::parse(text, "unicron_workshop_bot") {
            Ok(Command::Start) => start(bot, msg, pool).await,
            Ok(Command::Help) => help(bot, msg).await,
            Ok(Command::Services) => services(bot, msg).await,
            Ok(Command::Orders) => orders(bot, msg, pool).await,
            Ok(Command::Settings) => settings(bot, msg).await,
            Err(_) => {
                 match text {
                    "üì¶ –£—Å–ª—É–≥–∏" => services(bot, msg).await?,
                    "‚ùì F.A.Q" => help(bot, msg).await?,
                    "üóÇÔ∏è –ó–∞–∫–∞–∑—ã" => orders(bot, msg, pool).await?,
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" => settings(bot, msg).await?,
                    "üì© –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É" => {
                        bot.send_message(msg.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É support@example.com").await?;
                    }
                    _ => {
                        bot.send_message(msg.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–∞–∂–º–∏—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥").await?;
                    }
                }
                Ok(())
            }
        }
    } else {
        Ok(())
 }

}
