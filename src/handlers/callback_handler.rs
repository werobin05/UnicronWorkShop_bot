use sqlx::PgPool;
use teloxide::prelude::*;
use crate::services::send_invoice_service;
use crate::ui::keyboard::{keyboard_from_services};
use crate::repos::service_repo::fetch_by_category;
use crate::{models::ServiceCode, repos::service_repo::fetch_service_by_id};
use teloxide::types::{CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ParseMode};


pub async fn callback_handler(
    bot: Bot, q: CallbackQuery, pool: PgPool) -> ResponseResult<()> {
    let data = q.data.clone().unwrap_or_else(|| "–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç—É".into());
    
    let username = q.from.username.as_deref().unwrap_or("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π");


    let title = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º –≤–∏–¥ —É—Å–ª—É–≥–∏ üì¶";
    bot.answer_callback_query(q.id.clone())
        .text(format!("{} {}", data, &title))
        .await?;

    if let Some(ref msg) = q.message {
        let chat = msg.chat();

        match data.as_str() {
            "service_design" | "service_dev" | "service_marketing" => {
                let category_code = match data.as_str() {
                    "service_design" => ServiceCode::Design,
                    "service_dev" => ServiceCode::Dev,
                    "service_marketing" => ServiceCode::Marketing,
                    _ => {
                        bot.send_message(chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
                            .await?;
                        return Ok(());
                    }
                };
                match fetch_by_category(&pool, category_code).await {
                    Ok(services) => {
                        let keyboard: InlineKeyboardMarkup = keyboard_from_services(&services);
                        bot.send_message(chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç")
                            .reply_markup(keyboard)
                            .await?;
                    }
                    Err(e) => {
                        eprintln!("‚ùå Error when receiving services: {:?}", e);
                        bot.send_message(chat.id, "–ù–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥.")
                            .await?;
                    }
                }
            }

            "back_to_services" => {
                bot.delete_message(msg.chat().id, msg.id()).await?;
            }

            "back_menu" => {
                bot.delete_message(msg.chat().id, msg.id()).await?;
            }
            
            "join_command" => {
                
                let nav_keyboard = InlineKeyboardMarkup::new(vec![
                    vec![
                        InlineKeyboardButton::callback("fill_form", "fill_form"),
                    ],
                    vec![
                        InlineKeyboardButton::callback("go_back_view", "back_to_services"),
                    ],
                ]);

                bot.send_message(msg.chat().id, format!(
                    "üëã –ü—Ä–∏–≤–µ—Ç, @{}!\n\n\
                    –†–µ—à–∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ? ‚Äî <b>–ö–æ–º–∞–Ω–¥–∞ Unicron</b> üî∞\n\n\
                    –ß—Ç–æ–±—ã —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ, \
                    –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã.\n\n\
                    <b>–ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:</b>\n\
                    üìç –í–µ—Å—ë–ª–∞—è –∏ –¥—Ä—É–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\
                    üìç –ó–∞–¥–∞—á–∏ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é\n\
                    üìç –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ —Ä–∞–∑–≤–∏—Ç–∏—è\n\n\
                    –ú—ã —É–∂–µ –∂–¥—ë–º –≤–∞—Å –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!",
                    username
                ))
                .reply_markup(nav_keyboard)
                .parse_mode(ParseMode::Html)
                .await?;
            }

            other if other.starts_with("service_") => {
                let id_str = other.trim_start_matches("service_");
                if let Ok(service_id) = id_str.parse::<i32>() {
                    if let Ok(service) = fetch_service_by_id(&pool, service_id).await {
                        send_invoice_service(&bot, chat.id.0, service).await?;
                    } else {
                        bot.send_message(chat.id, format!("{}", "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")).await?;
                    }
                } else {
                    bot.send_message(chat.id, format!("{}", "–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–π —É—Å–ª—É–≥–∏")).await?;
                }
            }

            _ => {
                bot.send_message(chat.id, format!("{}", "–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —É—Å–ª—É–≥—É"))
                    .await?;
            }
        }
    }

    Ok(())
}
