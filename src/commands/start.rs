use sqlx::PgPool;
use teloxide::prelude::*;
use teloxide::types::{KeyboardButton, KeyboardMarkup};

use crate::repos::user_repo::create_user;

pub async fn start(bot: Bot, msg: Message, pool: PgPool) -> ResponseResult<()> {
    let user = match msg.from.as_ref() {
        Some(u) => u,
        None => return Ok(()),
    };
    let username = user.username.as_deref().unwrap_or("unknown");
    if let Err(e) = create_user(&pool, username, "").await {
        log::error!("Failed to create or update user: {:?}", e);
    }

    let keyboard = KeyboardMarkup {
        keyboard: vec![
            vec![
                KeyboardButton::new("üì¶ –£—Å–ª—É–≥–∏"),
                KeyboardButton::new("üóÇÔ∏è –ó–∞–∫–∞–∑—ã"),
            ],
            vec![
                KeyboardButton::new("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                KeyboardButton::new("‚ùì F.A.Q"),
            ],
            vec![
                KeyboardButton::new("üì© –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"),
            ]
        ],
        resize_keyboard: true,
        one_time_keyboard: false,
        selective: false,
        is_persistent: true,
        input_field_placeholder: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üìç".to_string(),
    };

    bot.send_message(
            msg.chat.id,
            format!(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{}! üëã\n\n\
                 –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ /services.\n\
                 –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî /help.\n\n\
                 –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É.",
                username
            ),
        )
        .reply_markup(keyboard)
        .await?;

    Ok(())
}
